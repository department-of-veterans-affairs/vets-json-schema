import ajv from 'ajv';
import { omit } from 'lodash';
import { expect } from 'chai';
import { it } from 'mocha';
import schemas from '../../../dist/schemas';
import SchemaTestHelper from '../../support/schema-test-helper';
import definitions from '../../../src/common/definitions';

const applicationSchema = schemas['10-10EZ'];

const schemaTestHelper = new SchemaTestHelper(omit(applicationSchema, 'required'));
const jsonValidator = ajv({ allErrors: true, errorDataPath: 'property', removeAdditional: true, useDefaults: true });

function definitionValidator(field) {
  const tinySchema = {
    $schema: 'http://json-schema.org/draft-04/schema#',
    type: 'object',
    properties: {
      field: definitions[field],
    },
  };

  return function validator(value) {
    const fn = jsonValidator.compile(tinySchema);
    return fn({ field: value });
  };
}

function stringGenerate(length) {
  return new Array(length + 1).join('a');
}

// TODO: These should be cross checked against what's generated by common/veteran.js and possibly
// what's in utils/validations.js for a more inter-connected verification that we're sending and
// getting what's expected all around.
describe('healthcare-application json schema', () => {
  describe('phone', () => {
    const phoneValidation = definitionValidator('hcaPhone');
    it('validates a 10 digit number as a string', () => {
      expect(phoneValidation('1234567890')).to.be.true;
    });

    it('does not validate a 10 digit string of non-numeric characters', () => {
      expect(phoneValidation('abcdefghij')).to.be.false;
    });

    it('does not validate phone numbers that include punctuation', () => {
      expect(phoneValidation('123-456-7890')).to.be.false;
    });

    it('does not validate integer representations', () => {
      expect(phoneValidation(1234567890)).to.be.false;
    });

    it('does not allow blank values', () => {
      expect(phoneValidation('')).to.be.false;
    });
  });

  describe('ssn', () => {
    const ssnValidation = definitionValidator('ssn');
    it('validates a single string of numbers', () => {
      expect(ssnValidation('111223333')).to.be.true;
    });

    it('does not validate non-numeric values', () => {
      expect(ssnValidation('aaa223333')).to.be.false;
    });
  });

  describe('fullName', () => {
    const fullNameValidation = definitionValidator('hcaFullName');
    it('allows 2 letter last names', () => {
      expect(fullNameValidation({ first: 'foo', last: 'ba' })).to.be.true;
    });

    it('doesnt allow 1 letter last names', () => {
      expect(fullNameValidation({ first: 'foo', last: 'b' })).to.be.false;
    });

    it("doesn't allow names with only spaces", () => {
      expect(fullNameValidation({ first: '   ', last: '  ' })).to.be.false;
    });
  });

  describe('address', () => {
    const addressValidation = definitionValidator('hcaAddress');
    it("doesn't allow street, cities, or provinces with only spaces", () => {
      expect(addressValidation({ street: '   ', city: '    ', country: '     ', provinceCode: '     ' })).to.be.false;
    });
  });

  schemaTestHelper.testValidAndInvalid('attachments', {
    valid: [
      [
        {
          dd214: true,
          confirmationCode: 'testing',
          name: 'testing',
          size: 1,
        },
      ],
    ],
    invalid: [1],
  });

  schemaTestHelper.testValidAndInvalid('veteranFullName', {
    valid: [
      {
        first: 'a0ad6a23fa748a2768fcf604',
        last: 'dfdf',
      },
    ],
    invalid: [
      {
        first: 'a0ad6a23fa748a2768fcf6041d',
        last: 'dfdf',
      },
    ],
  });

  schemaTestHelper.testValidAndInvalid('email', {
    valid: ['a@a.com', 'a@a.net', 'a+2@a.com', 'Foo@foo.com', 'foo.bar@foo.org'],
    invalid: ['@', 'foo', 'foo.com', 'a@a', 'a@a.', '@a.com'],
  });

  schemaTestHelper.testValidAndInvalid('lastServiceBranch', {
    valid: ['air force', 'army', 'coast guard', 'marine corps', 'merchant seaman', 'navy', 'noaa', 'space force', 'usphs', 'f.commonwealth', 'f.guerilla', 'f.scouts new', 'f.scouts old'],
    invalid: [null, 3, 'random-string'],
  });
});
